# -*- coding: utf-8 -*-
"""bounding_box_finder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w_JutrXqMv7eXZPLNoVFlRqi95qBKUWe
"""

!pip install torch  #YOLOv5 runs on top of PyTorch, so we need to import it to the notebook

import torch # YOLOv5 implemented using pytorch
from IPython.display import Image #this is to render predictions
import matplotlib.pyplot as plt

!git clone https://github.com/ultralytics/yolov5
!pip install -r /content/yolov5/requirements.txt



# Define function of model
def bounding_box_finder(<img_path>, <level_of_confidence = 0.5>):
  """
  Enter a path and a number 
  : param img_path : First input to bounding_box_finder
  : type img_path : str or list 
  : param level_of_confidence : Second input to bounding_box_finder
  : type level_of_confidence : float 
  : results : bounding box
  : rtype : list or pandas

  """

  count = 0 

  if type(img_path) == str:
    model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/data/weightE100/best.pt')
    results = model(img_path)
    if len(results.pandas().xyxy[0].index)==0:
      print(f"I am unable to draw bounding box for: {img_path}")
    else:   
      if results.pandas().xyxy[0].confidence[0] >= level_of_confidence:
        print(f"{results.pandas().xyxy} is result for {img_path}")  # img predictions (pandas)
      else:
        print(f"The confidence of bounding box is : {img_path}  with choosen confidence")  

  elif type(img_path) == list:
    model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/data/weightE100/best.pt')
    results = model(img_path)

    for i in range(len(img_path)):
      if len(results.pandas().xyxy[i].index)==0:
        print(f"I am unable to draw bounding box for: {img_path[i]}")
        print("-----------------------")
        i+=1
      else:
        if results.pandas().xyxy[i].confidence[0] >= level_of_confidence:
          count+=1  
          print(f"{results.pandas().xyxy[i]}")
          print(f"is result for {img_path[i]}")
          print(f"Model predict {count}  images from {len(img_path)}") 
          print("----------------------") 
          i+=1
        
          
        else:
          print(f"I am unable to draw bounding box for: {img_path[i]}  with choosen confidence")
          print("----------------------") 
  else:
     print("Please Input a path of image file")

img_path = "-----"
level_of_confidence = ----
bounding_box_finder(<img_path>, <level_of_confidence >)